"""
Scan module for the reconnaissance framework.
Performs vulnerability scanning and analysis on discovered hosts.
"""

import logging
import os
import json
import requests
import subprocess
from datetime import datetime

logger = logging.getLogger(__name__)

def run(config, db_client):
    """
    Run the scan module.
    
    Args:
        config (dict): Configuration dictionary
        db_client (MongoClient): MongoDB client
        
    Returns:
        dict: Results of vulnerability scanning
    """
    logger.info("Starting scan module")
    
    # Initialize database
    db = db_client[config.get('mongodb', {}).get('database', 'recon_framework')]
    new_hosts_discovered = db.new_hosts_discovered
    
    # Get hosts that haven't been scanned yet
    unscanned_hosts = list(new_hosts_discovered.find({
        "$or": [
            {"acunetix_scanned": False},
            {"nuclei_scanned": False}
        ]
    }).sort("discovery_date", -1).limit(50))
    
    if not unscanned_hosts:
        logger.info("No new hosts found for scanning")
        return {'vulnerabilities': []}
    
    logger.info(f"Found {len(unscanned_hosts)} hosts for scanning")
    
    # Run scans
    acunetix_results = run_acunetix_scans(config, unscanned_hosts, new_hosts_discovered)
    nuclei_results = run_nuclei_scans(config, unscanned_hosts, new_hosts_discovered)
    vt_results = run_vt_scans(config, unscanned_hosts, new_hosts_discovered)
    
    # Combine results
    all_vulnerabilities = []
    all_vulnerabilities.extend(acunetix_results)
    all_vulnerabilities.extend(nuclei_results)
    all_vulnerabilities.extend(vt_results)
    
    logger.info(f"Scan module completed. Found {len(all_vulnerabilities)} vulnerabilities.")
    return {
        'vulnerabilities': all_vulnerabilities
    }

def run_acunetix_scans(config, hosts, hosts_collection):
    """
    Run Acunetix scans on discovered hosts.
    
    Args:
        config (dict): Configuration dictionary
        hosts (list): List of host documents to scan
        hosts_collection (Collection): MongoDB collection for hosts
        
    Returns:
        list: Acunetix scan results
    """
    logger.info("Starting Acunetix scans")
    
    acunetix_config = config.get('acunetix', {})
    servers = acunetix_config.get('servers', [])
    
    if not servers:
        logger.warning("No Acunetix servers configured")
        return []
    
    vulnerabilities = []
    
    # Filter hosts that need Acunetix scanning
    hosts_to_scan = [host for host in hosts if not host.get('acunetix_scanned', False)]
    
    if not hosts_to_scan:
        logger.info("No hosts need Acunetix scanning")
        return []
    
    logger.info(f"Found {len(hosts_to_scan)} hosts for Acunetix scanning")
    
    # Distribute hosts across available Acunetix servers
    server_index = 0
    for host in hosts_to_scan:
        if server_index >= len(servers):
            server_index = 0
        
        server = servers[server_index]
        server_url = server.get('url')
        api_key = server.get('api_key')
        
        if not server_url or not api_key:
            logger.warning(f"Invalid Acunetix server configuration: {server}")
            server_index += 1
            continue
        
        subdomain = host.get('subdomain')
        port = host.get('port')
        
        if not subdomain or not port:
            continue
        
        target_url = f"http://{subdomain}:{port}" if port != 443 else f"https://{subdomain}"
        
        try:
            # This is a simplified example of Acunetix API integration
            # In a real implementation, you would need to:
            # 1. Add the target to Acunetix
            # 2. Start a scan
            # 3. Poll for scan completion
            # 4. Retrieve scan results
            
            logger.info(f"Starting Acunetix scan for {target_url}")
            
            # Simulate Acunetix API call to add target
            headers = {
                'X-Auth': api_key,
                'Content-Type': 'application/json'
            }
            
            # This is a placeholder for the actual API call
            # response = requests.post(
            #     f"{server_url}/api/v1/targets",
            #     headers=headers,
            #     json={"address": target_url, "description": f"Automated scan of {subdomain}:{port}"}
            # )
            
            # For demonstration purposes, we'll simulate finding vulnerabilities
            simulated_vulnerabilities = [
                {
                    "host": f"{subdomain}:{port}",
                    "vulnerability_type": "XSS",
                    "severity": "high",
                    "description": "Simulated Cross-site scripting vulnerability",
                    "source": "acunetix"
                },
                {
                    "host": f"{subdomain}:{port}",
                    "vulnerability_type": "SQL Injection",
                    "severity": "critical",
                    "description": "Simulated SQL injection vulnerability",
                    "source": "acunetix"
                }
            ]
            
            vulnerabilities.extend(simulated_vulnerabilities)
            
            # Mark host as scanned in database
            hosts_collection.update_one(
                {"_id": host.get("_id")},
                {"$set": {"acunetix_scanned": True}}
            )
            
            logger.info(f"Completed Acunetix scan for {target_url}")
            
        except Exception as e:
            logger.error(f"Error during Acunetix scan for {target_url}: {str(e)}")
        
        server_index += 1
    
    logger.info(f"Completed all Acunetix scans. Found {len(vulnerabilities)} vulnerabilities.")
    return vulnerabilities

def run_nuclei_scans(config, hosts, hosts_collection):
    """
    Run Nuclei scans on discovered hosts.
    
    Args:
        config (dict): Configuration dictionary
        hosts (list): List of host documents to scan
        hosts_collection (Collection): MongoDB collection for hosts
        
    Returns:
        list: Nuclei scan results
    """
    logger.info("Starting Nuclei scans")
    
    # Get tool paths from config
    tools_config = config.get('tools', {})
    nuclei_path = tools_config.get('nuclei')
    
    # Get Nuclei templates path
    nuclei_config = config.get('nuclei', {})
    templates_path = nuclei_config.get('templates_path')
    
    # Verify tool existence
    if not os.path.exists(nuclei_path):
        logger.warning(f"Nuclei not found at {nuclei_path}")
        return []
    
    # Verify templates path
    if not templates_path or not os.path.exists(templates_path):
        logger.warning(f"Nuclei templates not found at {templates_path}")
        templates_arg = []  # Use default templates
    else:
        templates_arg = ['-t', templates_path]
    
    vulnerabilities = []
    
    # Filter hosts that need Nuclei scanning
    hosts_to_scan = [host for host in hosts if not host.get('nuclei_scanned', False)]
    
    if not hosts_to_scan:
        logger.info("No hosts need Nuclei scanning")
        return []
    
    logger.info(f"Found {len(hosts_to_scan)} hosts for Nuclei scanning")
    
    # Prepare target list
    targets = []
    for host in hosts_to_scan:
        subdomain = host.get('subdomain')
        port = host.get('port')
        
        if not subdomain or not port:
            continue
        
        target_url = f"http://{subdomain}:{port}" if port != 443 else f"https://{subdomain}"
        targets.append(target_url)
    
    if not targets:
        logger.info("No valid targets for Nuclei scanning")
        return []
    
    # Write targets to temporary file
    import tempfile
    with tempfile.NamedTemporaryFile(mode='w', delete=False) as temp_file:
        for target in targets:
            temp_file.write(f"{target}\n")
        targets_file = temp_file.name
    
    try:
        # Run Nuclei scan
        logger.info(f"Running Nuclei scan on {len(targets)} targets")
        
        nuclei_cmd = [
            nuclei_path,
            '-l', targets_file,
            '-silent',
            '-json',
            '-o', 'nuclei_results.json'
        ]
        
        if templates_arg:
            nuclei_cmd.extend(templates_arg)
        
        subprocess.run(nuclei_cmd, check=True)
        
        # Parse results
        if os.path.exists('nuclei_results.json'):
            with open('nuclei_results.json', 'r') as f:
                for line in f:
                    try:
                        result = json.loads(line)
                        
                        # Extract host and port from URL
                        host_url = result.get('host', '')
                        host_parts = host_url.replace('http://', '').replace('https://', '').split(':')
                        
                        host_name = host_parts[0]
                        host_port = 443 if 'https://' in host_url else int(host_parts[1]) if len(host_parts) > 1 else 80
                        
                        vulnerability = {
                            "host": f"{host_name}:{host_port}",
                            "vulnerability_type": result.get('info', {}).get('name', 'Unknown'),
                            "severity": result.get('info', {}).get('severity', 'info').lower(),
                            "description": result.get('info', {}).get('description', ''),
                            "source": "nuclei"
                        }
                        
                        vulnerabilities.append(vulnerability)
                    except json.JSONDecodeError:
                        continue
            
            # Clean up results file
            os.remove('nuclei_results.json')
        
        # Mark hosts as scanned in database
        for host in hosts_to_scan:
            hosts_collection.update_one(
                {"_id": host.get("_id")},
                {"$set": {"nuclei_scanned": True}}
            )
        
    except subprocess.CalledProcessError as e:
        logger.error(f"Error running Nuclei: {str(e)}")
    except Exception as e:
        logger.error(f"Unexpected error during Nuclei scanning: {str(e)}")
    finally:
        # Clean up targets file
        if os.path.exists(targets_file):
            os.remove(targets_file)
    
    logger.info(f"Completed Nuclei scans. Found {len(vulnerabilities)} vulnerabilities.")
    return vulnerabilities

def run_vt_scans(config, hosts, hosts_collection):
    """
    Run VirusTotal scans on discovered hosts.
    
    Args:
        config (dict): Configuration dictionary
        hosts (list): List of host documents to scan
        hosts_collection (Collection): MongoDB collection for hosts
        
    Returns:
        list: VirusTotal scan results
    """
    logger.info("Starting VirusTotal scans")
    
    vt_config = config.get('virustotal', {})
    api_keys = vt_config.get('api_key', [])
    
    if not api_keys:
        logger.warning("No VirusTotal API keys configured")
        return []
    
    vulnerabilities = []
    
    # Process each host
    api_key_index = 0
    for host in hosts:
        if api_key_index >= len(api_keys):
            api_key_index = 0
        
        api_key = api_keys[api_key_index]
        
        subdomain = host.get('subdomain')
        if not subdomain:
            continue
        
        try:
            # Query VirusTotal for domain information
            logger.info(f"Querying VirusTotal for {subdomain}")
            
            headers = {
                'x-apikey': api_key
            }
            
            # This is a placeholder for the actual API call
            # response = requests.get(
            #     f"https://www.virustotal.com/api/v3/domains/{subdomain}",
            #     headers=headers
            # )
            
            # For demonstration purposes, we'll simulate finding issues
            if subdomain.startswith('mail.') or subdomain.startswith('admin.'):
                simulated_result = {
                    "host": subdomain,
                    "vulnerability_type": "Suspicious Domain",
                    "severity": "medium",
                    "description": f"VirusTotal reports suspicious activity for {subdomain}",
                    "source": "virustotal"
                }
                
                vulnerabilities.append(simulated_result)
                
                # Update host record with VirusTotal information
                hosts_collection.update_one(
                    {"_id": host.get("_id")},
                    {"$set": {
                        "vt_scanned": True,
                        "vt_detection_ratio": "5/80",
                        "vt_permalink": f"https://www.virustotal.com/gui/domain/{subdomain}/detection"
                    }}
                )
            
            logger.info(f"Completed VirusTotal scan for {subdomain}")
            
        except Exception as e:
            logger.error(f"Error during VirusTotal scan for {subdomain}: {str(e)}")
        
        api_key_index += 1
    
    logger.info(f"Completed all VirusTotal scans. Found {len(vulnerabilities)} issues.")
    return vulnerabilities
